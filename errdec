#!/usr/bin/env python

import sys
import re
import subprocess

errno_headers = [
    "/usr/include/asm-generic/errno-base.h",
    "/usr/include/asm-generic/errno.h",
]


class ErrorCodeChecker:
    """
    Parse errno header files to get a dict of errno and error names,
    Keeping a map from errno to error name.
    For each check() we first get error name, then search in LIBC document.
    """
    def __init__(self, headers=errno_headers):
        self.defpat = re.compile(
            r"#define\s+(?P<name>E[A-Z0-9]+)\s+(?P<code>\d+)\s+/\*\s(?P<comment>.*)\s\*/"
        )
        self.docpat = re.compile(r"\s--\sMacro:\sint\s(?P<name>E[A-Z0-9]+)")
        self.errnos = {}
        for h in headers:
            self.errnos |= self.parse_errno_header(h)

    def parse_errno_header(self, header: str) -> {int: (str)}:
        "Parse header file and generate a dict of errno and description."
        errnos = {}
        with open(header, "r") as f:
            matched = filter(None, [self.defpat.match(line) for line in f.readlines()])
            for m in matched:
                d = m.groupdict()
                errnos[int(d["code"])] = (d["name"], d["comment"])
        return errnos

    def search_info(self, errname: str) -> str:
        "Search error name and find description in libc gnu info document."
        p = subprocess.Popen(["info", "libc", "Error Codes"], stdout=subprocess.PIPE)
        output = p.communicate()[0]
        flag = False
        buf = []

        for line in output.decode().splitlines():
            m = self.docpat.match(line)
            if m is None:
                if flag is True:
                    buf.append(line)
            else:
                if flag is True or len(buf) >= 512:
                    break
                else:
                    if m.groupdict()["name"] == errname:
                        buf.append(line)
                        flag = True
        return '\n'.join(buf)

    def check(self, errno: int):
        "Do a check, find and print information about errno."
        if errno in self.errnos:
            print(f"Errno Name: {self.errnos[errno][0]}")
            print(f"Comments: {self.errnos[errno][1]}")
            print("Libc Info:\n")
            print(self.search_info(self.errnos[errno][0]))
        else:
            print(f"Nothing found about errno {errno}.")

def main():
    if (len(sys.argv) < 2 or
        sys.argv[1] == "-h" or
        sys.argv[1] == "--help"):
        print("usage: errdec [ERRNO]")
        return
    checker = ErrorCodeChecker()
    for errno in sys.argv[1:]:
        checker.check(int(errno))


if __name__ == "__main__":
    main()
